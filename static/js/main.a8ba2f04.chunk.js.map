{"version":3,"sources":["data/posts.js","redux/reducer.js","Components/Photo.js","Components/PhotoWall.js","Components/AddPhoto.js","Components/Comments.js","Components/Single.js","Components/Main.js","database/config.js","redux/actions.js","Components/App.js","index.js"],"names":["posts","rootReducer","combineReducers","state","postsList","action","type","slice","index","post","comments","postId","comment","Photo","props","className","to","id","src","imageLink","alt","description","onClick","startRemovingPost","history","push","length","PhotoWall","sort","x","y","map","key","AddPhoto","handleSubmit","bind","event","preventDefault","target","elements","link","value","Number","Date","this","startAddingPost","onHistory","onSubmit","placeholder","name","Component","Comments","startAddingComment","hidden","Single","match","params","find","findIndex","loading","Main","startLoadingPost","then","setState","startLoadingComments","console","log","exact","path","render","onNavigate","navigate","firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","database","dispatch","ref","update","addPost","once","snapshot","forEach","childSnapshot","val","loadPosts","catch","error","updates","removePost","addComment","Object","values","loadComments","App","withRouter","connect","bindActionCreators","actions","store","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","applyMiddleware","thunk","ReactDOM","basename","location","pathname","document","getElementById"],"mappings":"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","file":"static/js/main.a8ba2f04.chunk.js","sourcesContent":["const posts = [];\r\n\r\nexport default posts;\r\n","import postsList from \"../data/posts\";\r\nimport { combineReducers } from \"redux\";\r\n\r\nfunction comments(state = {}, action) {\r\n  switch (action.type) {\r\n    case \"ADD_COMMENT\":\r\n      if (!state[action.postId]) {\r\n        return { ...state, [action.postId]: [action.comment] };\r\n      } else {\r\n        return {\r\n          ...state,\r\n          [action.postId]: [...state[action.postId], action.comment],\r\n        };\r\n      } //\r\n\r\n    case \"LOAD_COMMENTS\":\r\n      return action.comments;\r\n\r\n    default:\r\n      return state;\r\n  }\r\n  return state;\r\n}\r\n\r\nfunction posts(state = postsList, action) {\r\n  switch (action.type) {\r\n    case \"REMOVE_POST\":\r\n      return [\r\n        ...state.slice(0, action.index),\r\n        ...state.slice(action.index + 1),\r\n      ];\r\n    case \"ADD_POST\":\r\n      return [...state, action.post]; //return current state of app with new photo\r\n    case \"LOAD_POSTS\":\r\n      return action.posts;\r\n    default:\r\n      return state;\r\n  }\r\n  return state;\r\n}\r\n\r\nconst rootReducer = combineReducers({ posts, comments });\r\n\r\nexport default rootReducer;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nfunction Photo(props) {\r\n  const post = props.post;\r\n  return (\r\n    // clicking\r\n    <figure className=\"figure\">\r\n      <Link to={`/single/${post.id}`}>\r\n        <img className=\"photo\" src={post.imageLink} alt={post.description} />\r\n      </Link>\r\n\r\n      <figcaption>\r\n        <p>{post.description}</p>\r\n      </figcaption>\r\n      <div className=\"button-container\">\r\n        <button\r\n          onClick={() => {\r\n            props.startRemovingPost(props.index, post.id);\r\n            props.history.push(\"/\");\r\n          }}\r\n        >\r\n          Remove\r\n        </button>\r\n        <Link className=\"button\" to={`/single/${post.id}`}>\r\n          <div className=\"comment-count\">\r\n            <div className=\"speech-bubble\"></div>\r\n            {props.comments[post.id] ? props.comments[post.id].length : 0}\r\n          </div>\r\n        </Link>\r\n      </div>\r\n    </figure>\r\n  );\r\n}\r\n\r\nPhoto.propTypes = {\r\n  posts: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default Photo;\r\n","import React from \"react\";\r\nimport Photo from \"./Photo\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Link } from \"react-router-dom\";\r\n//anchor tags, href attributes\r\n\r\nfunction PhotoWall(props) {\r\n  return (\r\n    <div>\r\n      <Link className=\"addIcon\" to=\"/AddPhoto\"></Link>\r\n      <div className=\"photo-grid\">\r\n        {props.posts\r\n          .sort(function(x, y) {\r\n            return y.id - x.id;\r\n          })\r\n          .map((post, index) => (\r\n            <Photo key={index} post={post} {...props} index={index} />\r\n          ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nPhotoWall.propTypes = {\r\n  posts: PropTypes.array.isRequired\r\n};\r\n\r\nexport default PhotoWall;\r\n","import React, { Component } from \"react\";\r\nimport { Route, Link } from \"react-router-dom\";\r\n\r\nclass AddPhoto extends Component {\r\n  constructor() {\r\n    //this constructor binds the handleSubmit to itself?\r\n    super();\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n  }\r\n  handleSubmit(event) {\r\n    //event handler\r\n    event.preventDefault();\r\n    const imageLink = event.target.elements.link.value;\r\n    const description = event.target.elements.description.value;\r\n    const post = {\r\n      id: Number(new Date()),\r\n      description: description,\r\n      imageLink: imageLink,\r\n    };\r\n    if (description && imageLink) {\r\n      this.props.startAddingPost(post); //we submit the form and it triggers an action - which goes to reducer.js\r\n\r\n      this.props.onHistory.push(\"/\"); //this takes us back to the index page after we click the 'post' button\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h1 className=\"font-face\">\r\n          <Link to=\"/\">Photowall</Link>\r\n        </h1>\r\n        <div className=\"form\">\r\n          <form onSubmit={this.handleSubmit}>\r\n            <input type=\"text\" placeholder=\"Link\" name=\"link\" />\r\n            <input type=\"text\" placeholder=\"Description\" name=\"description\" />\r\n            <button>Post</button>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AddPhoto;\r\n","import React, { Component } from \"react\";\r\n\r\nclass Comments extends Component {\r\n  constructor() {\r\n    super();\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n  }\r\n\r\n  handleSubmit(event) {\r\n    event.preventDefault();\r\n    const comment = event.target.elements.comment.value;\r\n    this.props.startAddingComment(comment, this.props.id);\r\n    event.target.elements.comment.value = \"\";\r\n  }\r\n\r\n  render() {\r\n    //\r\n    return (\r\n      <div className=\"comment\">\r\n        {this.props.comments.map((comment, index) => {\r\n          return <p key={index}>{comment}</p>;\r\n        })}\r\n\r\n        <form className=\"comment-form\" onSubmit={this.handleSubmit}>\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Add comment here, then press enter\"\r\n            name=\"comment\"\r\n          />\r\n          <input type=\"submit\" hidden />\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Comments;\r\n","import React, { Component } from \"react\";\r\nimport Photo from \"./Photo\";\r\nimport Comments from \"./Comments\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nclass Single extends Component {\r\n  render() {\r\n    const { match, posts } = this.props;\r\n    const id = Number(match.params.id);\r\n    const post = posts.find((post) => post.id === id);\r\n    const comments = this.props.comments[match.params.id] || [];\r\n    const index = this.props.posts.findIndex((post) => post.id === id);\r\n    if (this.props.loading === true) {\r\n      return (\r\n        <div>\r\n          <h1> ...loading </h1>\r\n        </div>\r\n      );\r\n    } else if (post) {\r\n      return (\r\n        <div>\r\n          <h1 className=\"font-face\">\r\n            <Link to=\"/\">Photowall</Link>\r\n          </h1>\r\n          <div className=\"single-photo\">\r\n            <Photo post={post} {...this.props} index={index} />\r\n            <Comments\r\n              startAddingComment={this.props.startAddingComment}\r\n              comments={comments}\r\n              id={id}\r\n            />\r\n          </div>\r\n        </div>\r\n      );\r\n    } else {\r\n      return (\r\n        <h2>\r\n          <Link to=\"/\">...Sorry, no post found</Link>\r\n        </h2>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nexport default Single;\r\n","import React, { Component } from \"react\";\r\nimport PhotoWall from \"./PhotoWall\";\r\nimport AddPhoto from \"./AddPhoto\";\r\nimport { Route, Link } from \"react-router-dom\";\r\nimport Single from \"./Single\";\r\n\r\nclass Main extends Component {\r\n  state = { loading: true };\r\n  componentDidMount() {\r\n    // this will load the existing posts in the firebase database\r\n    this.props.startLoadingPost().then(() => {\r\n      this.setState({ loading: false });\r\n    });\r\n    this.props.startLoadingComments();\r\n  }\r\n  render() {\r\n    console.log(this.props);\r\n    return (\r\n      <div>\r\n        <Route\r\n          exact\r\n          path=\"/\"\r\n          render={() => (\r\n            <div>\r\n              <h1 className=\"font-face\">\r\n                <Link to=\"/\">Photowall</Link>\r\n              </h1>\r\n\r\n              <PhotoWall {...this.props} onNavigate={this.navigate} />\r\n            </div>\r\n          )}\r\n        />\r\n\r\n        <Route\r\n          path=\"/AddPhoto\"\r\n          render={({ history }) => (\r\n            <AddPhoto {...this.props} onHistory={history} />\r\n          )}\r\n        />\r\n        <Route\r\n          path=\"/single/:id\"\r\n          render={(params) => (\r\n            <Single loading={this.state.loading} {...this.props} {...params} />\r\n          )}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Main;\r\n","import * as firebase from \"firebase\";\r\n// Your web app's Firebase configuration\r\nvar config = {\r\n  apiKey: \"AIzaSyAeEXnVPgnpxrlRDUBhTHNVZLpjU2qNang\",\r\n  authDomain: \"photowall-d9e8b.firebaseapp.com\",\r\n  databaseURL: \"https://photowall-d9e8b.firebaseio.com\",\r\n  projectId: \"photowall-d9e8b\",\r\n  storageBucket: \"photowall-d9e8b.appspot.com\",\r\n  messagingSenderId: \"72736867679\",\r\n  appId: \"1:72736867679:web:69d2978783b359f61262ea\"\r\n};\r\n// Initialize Firebase\r\nfirebase.initializeApp(config);\r\n\r\nconst database = firebase.database();\r\n\r\nexport {\r\n  database\r\n};","import { database } from \"../database/config\";\r\nexport function startAddingPost(post) {\r\n  return (dispatch) => {\r\n    return database\r\n      .ref(\"posts\")\r\n      .update({ [post.id]: post })\r\n      .then(() => {\r\n        dispatch(addPost(post));\r\n      });\r\n  };\r\n}\r\n\r\nexport function startLoadingPost() {\r\n  //this function fetches the current posts in firebase and builds a snapshot using the once method\r\n  return (dispatch) => {\r\n    return database\r\n      .ref(\"posts\")\r\n      .once(\"value\")\r\n      .then((snapshot) => {\r\n        let posts = [];\r\n        snapshot.forEach((childSnapshot) => {\r\n          posts.push(childSnapshot.val());\r\n        });\r\n        dispatch(loadPosts(posts)); //\r\n      })\r\n      .catch((error) => {\r\n        //if the asynchronious call fails, the console log will show error\r\n        console.log(error);\r\n      });\r\n  };\r\n}\r\n\r\nexport function startRemovingPost(index, id) {\r\n  const updates = {\r\n    [`posts/${id}`]: null,\r\n    [`comments/${id}`]: null,\r\n  };\r\n  /* this specifies the paths that we want to update to null \r\n   (basically delete)\r\n   we're navigating to the post with id we clicked remove on, \r\n   as well as the comments belonging to that post, with \r\n   that same id. */\r\n\r\n  return (dispatch) => {\r\n    return database\r\n      .ref()\r\n      .update(updates)\r\n      .then(() => {\r\n        dispatch(removePost(index));\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n  };\r\n}\r\n\r\n/*finally, we're updating the database from its root node, such\r\n   that it navigates to the posts path, as well as the comments\r\n    path, and  sets them to null ! (in other words, deletes both\r\n   of them). \r\n   After deleting the post and its comments from the database,\r\n   like always, we're updating\r\n   the ui by dispatching an action to our reducer \r\n   inside of .then() */\r\n\r\nexport function startAddingComment(comment, postId) {\r\n  return (dispatch) => {\r\n    return database\r\n      .ref(\"comments/\" + postId)\r\n      .push(comment)\r\n      .then(() => {\r\n        //this gives our new comment a unique id in firebase.\r\n        dispatch(addComment(comment, postId));\r\n      })\r\n      .catch((error) => {\r\n        //if the asynchronious call fails, the console log will show error\r\n        console.log(error);\r\n      });\r\n  };\r\n}\r\n// the function below will enable the firebase database to persist and relaod all existing comments\r\nexport function startLoadingComments() {\r\n  return (dispatch) => {\r\n    return database\r\n      .ref(\"comments\")\r\n      .once(\"value\")\r\n      .then((snapshot) => {\r\n        let comments = {};\r\n        snapshot.forEach((childSnapshot) => {\r\n          comments[childSnapshot.key] = Object.values(childSnapshot.val());\r\n        });\r\n        dispatch(loadComments(comments));\r\n      });\r\n  };\r\n}\r\n\r\nexport function loadComments(comments) {\r\n  return {\r\n    type: \"LOAD_COMMENTS\",\r\n    comments,\r\n  };\r\n}\r\n\r\nexport function removePost(index) {\r\n  //this function will return a javascript object\r\n  return {\r\n    type: \"REMOVE_POST\",\r\n    index: index,\r\n  };\r\n}\r\n\r\nexport function addPost(post) {\r\n  return {\r\n    type: \"ADD_POST\",\r\n    post: post,\r\n  };\r\n}\r\n\r\nexport function addComment(comment, postId) {\r\n  return {\r\n    type: \"ADD_COMMENT\",\r\n    comment,\r\n    postId,\r\n  };\r\n}\r\n// adding post\r\n\r\nexport function loadPosts(posts) {\r\n  //this function takes in the data we just fetched from the firebase database and loads the posts\r\n  return {\r\n    type: \"LOAD_POSTS\",\r\n    posts,\r\n  };\r\n}\r\n","import Main from \"./Main\";\r\nimport { connect } from \"react-redux\";\r\nimport { bindActionCreators } from \"redux\";\r\nimport * as actions from \"../redux/actions\";\r\nimport { withRouter } from \"react-router\";\r\nfunction mapStateToProps(state) {\r\n  //takes our state living inside of our store an map to props in the form of posts component\r\n  return {\r\n    posts: state.posts,\r\n    comments: state.comments\r\n  };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n  return bindActionCreators(actions, dispatch);\r\n}\r\n\r\nconst App = withRouter(connect(mapStateToProps, mapDispatchToProps)(Main)); //the Main component, connected to the redux store\r\n\r\nexport default App;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./styles/stylesheet.css\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport { createStore, applyMiddleware } from \"redux\";\nimport rootReducer from \"./redux/reducer\";\nimport { Provider } from \"react-redux\";\nimport App from \"./Components/App\";\nimport thunk from \"redux-thunk\";\nimport { database } from \"./database/config\";\n\nconst store = createStore(\n  rootReducer,\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__(),\n  applyMiddleware(thunk)\n);\nReactDOM.render(\n  <Provider store={store}>\n    <BrowserRouter basename={window.location.pathname || \"\"}>\n      <App />\n    </BrowserRouter>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}